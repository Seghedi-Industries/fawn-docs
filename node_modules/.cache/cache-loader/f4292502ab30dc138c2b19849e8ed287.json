{"remainingRequest":"/Users/robertseghedi/Documents/GitHub/fawn-docs/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/robertseghedi/Documents/GitHub/fawn-docs/src/theme/Navbar/index.tsx","dependencies":[{"path":"/Users/robertseghedi/Documents/GitHub/fawn-docs/src/theme/Navbar/index.tsx","mtime":1629840570205},{"path":"/Users/robertseghedi/Documents/GitHub/fawn-docs/node_modules/cache-loader/dist/cjs.js","mtime":1619287638843},{"path":"/Users/robertseghedi/Documents/GitHub/fawn-docs/node_modules/babel-loader/lib/index.js","mtime":1618778624855}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}